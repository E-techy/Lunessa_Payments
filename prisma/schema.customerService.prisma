// üî• Multiple datasources
generator client {
  provider = "prisma-client-js"
  output   = "../generated/customer-service"
}

datasource db {
  provider = "mongodb"
  url      = env("LUNESSA_CUSTOMER_SERVICE_AGENTS_DATABASE_URL")
}


// 1Ô∏è‚É£ Customer Service Agents model
model CustomerServiceAgents {
  id                        String               @id @default(auto()) @map("_id") @db.ObjectId
  companyName               String
  establishmentDate         DateTime
  companyOwnerName          String
  companyHumanServiceNumber String
  companyEmail              String               
  companyDescription        String
  agentId                   String               @unique
  agentName                 String
  username                  String               @unique // New unique username field
  createdAt                 DateTime             @default(now())
  
  // New field to store per-model token counts and status
  tokenBalances             TokenBalance[]       

  // Currently active model in use for this agent
  usingModel                UsingModel?

  // Default model when no explicit usingModel is set
  defaultModel              DefaultModel?

  items                     Item[]

  // New fields
  lastModified              DateTime             @default(now())
  modificationHistory       AgentModification[]
} 

// 2Ô∏è‚É£ Token balances for all models the agent owns
type TokenBalance {
  modelName        String
  availableTokens  Int
  status           String  @default("inactive")  // e.g. "active" | "inactive"
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
}

// 3Ô∏è‚É£ The currently active model with tokens in use
type UsingModel {
  modelName        String
  availableTokens  Int
  status           String @default("inactive")   // e.g. "active" | "inactive"
}

// 4Ô∏è‚É£ The default fallback model and its token availability
type DefaultModel {
  modelName        String
  availableTokens  Int
}

// Embedded Item schema
type Item {
  itemName                      String
  itemCode                      String
  itemInitialWorkingExplanation String
  itemRunningSteps              String[]
  commonProblemsSolutions       ProblemSolution[]
}

type ProblemSolution {
  problem  String
  solution String
}


// 2Ô∏è‚É£ Agent Usage Statistics
model AgentUsageStatistics {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  agentId              String                 @unique
  agentName            String
  usageLogs            UsageLog[]
  satisfactionRate     Int                    @default(0) // Current satisfaction rate in percentage
  satisfactionRateLogs SatisfactionRateLog[]  // History of review stars
  customerReviews      CustomerReview[]
} 

type UsageLog {
  tokensUsed Int
  timestamp  DateTime @default(now())
}

type SatisfactionRateLog {
  reviewStar Int
  timestamp  DateTime @default(now())
}

type CustomerReview {
  username   String
  comment    String
  reviewStar Int
  timestamp  DateTime @default(now())
}

model AgentRequestsHandledLogs {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  agentId              String              @unique
  agentName            String
  totalRequestsHandled Int                 @default(0)
  requestLogs          RequestHandledLog[]
} 

type RequestHandledLog {
  timestamp DateTime @default(now())
}

model CompanyAgentsRegistered {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String        @unique   // ‚úÖ Now unique
  totalAgents Int           @default(0)
  agents      AgentRecord[]
} 

type AgentRecord {
  agentId   String
  agentName String
}

// Embedded type for agent modification history
type AgentModification {
  timestamp                 DateTime @default(now())
  items                     Item[]
  companyName               String
  establishmentDate         DateTime
  companyOwnerName          String
  companyHumanServiceNumber String
  companyEmail              String
  companyDescription        String
}



/// Offer model to store promotional campaigns, discounts, and coupon codes
model Offer {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  offerId           String   @unique                           // üîë unique identifier (UUID)
  title             String                                   // short title e.g. "New Year Sale"
  description       String?                                  // detailed description
  offerCode         String?   @unique                        // optional coupon code
  discountType      String                                   // e.g. "percentage" | "flat"
  discountValue     Float                                    // e.g. 20 (for 20%) or 500 (‚Çπ500 flat)
  maxDiscountAmount Float?                                  // optional cap for percentage discounts

  offerType         String                                   // e.g. "festival", "referral", "welcome"

  applicableTo      String[]                                // e.g. ["all", "new-users", "premium-users"]
  minPurchaseAmount Float?                                  // e.g. must spend ‚Çπ1000

  applicableProducts String[]                               // product IDs or categories
  usageLimit        Int?                                    // total number of times offer can be used globally
  usageLimitPerUser Int?                                    // per user usage cap

  globalUsedCount   Int      @default(0)                    // üî• how many times this offer has been applied (any user)

  startDate         DateTime
  endDate           DateTime
  status            String   @default("active")              // "active" | "expired" | "upcoming" | "paused"

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
} 


/// Track which user has used which offer and how many times
model OfferUsage {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  username    String       @unique                      // user identifier

  offersUsed  OfferUsed[]                              // embedded type for tracking offer usage
  availableCoupons Coupon[]                            // array of coupons assigned to this user

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

/// Embedded type to track individual offer usage by a user
type OfferUsed {
  offerId      String     // linked to Offer.offerId
  offerType    String     // copied from Offer.offerType for easy querying
  usageLimit   Int        // maximum usage allowed for this user (from Offer.usageLimitPerUser)
  usedCount    Int        @default(0)  // how many times user has applied the offer
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now())
}

/// Embedded type for individual coupons
type Coupon {
  couponCode        String   // unique coupon identifier
  used              Boolean  @default(false)  // whether coupon has been redeemed
  minOrderValue     Int      @default(0)      // minimum order value to apply coupon
  discountType      String   // "percentage" | "flat"
  discountValue     Int      // percentage value or flat discount
  maxDiscountAmount Int?     // maximum discount applicable (null if not capped)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
}



/// BaseDiscountSlab model ‚Üí stores the global base discount logic
model baseDiscountSlab {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  levels    DiscountLevel[]                             // Array of discount levels/slabs
  status    String          @default("active")          // "active" | "inactive"
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
} 

/// DiscountLevel ‚Üí embedded type for each slab/level
type DiscountLevel {
  minOrderValue   Float    // Minimum order value (inclusive)
  maxOrderValue   Float?   // Maximum order value (null = no upper limit)
  discountType    String   // "percentage" | "flat"
  discountValue   Float    // e.g. 10 (%) or 500 (‚Çπ flat discount)
  createdAt       DateTime @default(now())
}


/// AI models, pricing data
model AIModel {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  
  modelName     String   @unique                           // e.g. "gpt-4", "gpt-3.5", "claude-3-opus"
  provider      String                                   // e.g. "OpenAI", "Anthropic", "Google"
  
  pricePerToken Float                                    // price per token (in USD or INR)
  currency      String   @default("USD")                 // currency for price, default USD

  availableTill DateTime                                 // until when this model will be available (like end of support)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}


// stores information related to the user payments
model UserOrders {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 

// store the details of the user orders
type Order {
  orderId      String
  amount       Float
  paymentInfo  Json
  receipt      String
  fulfillment  Boolean @default(false)
  status       String?  @default("draft") // "draft" | "pending" | "failed" | "paid"
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

// stores the disputes created by the user
model Disputes {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  username  String     @unique                      // Each user has one disputes document
  disputes  Dispute[]                              // Array of disputes for that user
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// the dispute structure used by the admin to solve the disputes
type Dispute {
  disputeId      String                      // Unique ID for each dispute
  orderId        String                               // Order against which dispute is raised
  disputeComment String                               // User‚Äôs complaint/comment
  resolved       Boolean   @default(false)           // Whether dispute is resolved
  resolvedComment String                             // Admins resolution comment
  createdAt      DateTime  @default(now())           // When dispute was raised
  updatedAt      DateTime  @default(now())           // Last update (status/comment changes)
}

 







