generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// 1Ô∏è‚É£ Customer Service Agents model
model CustomerServiceAgents {
  id                        String               @id @default(auto()) @map("_id") @db.ObjectId
  companyName               String
  establishmentDate         DateTime
  companyOwnerName          String
  companyHumanServiceNumber String
  companyEmail              String               
  companyDescription        String
  agentId                   String               @unique
  agentName                 String
  username                  String               @unique // New unique username field
  createdAt                 DateTime             @default(now())
  availableTokens           Int                  @default(0)
  items                     Item[]

  // New fields
  lastModified              DateTime             @default(now())
  modificationHistory       AgentModification[]
}

// Embedded Item schema
type Item {
  itemName                      String
  itemCode                      String
  itemInitialWorkingExplanation String
  itemRunningSteps              String[]
  commonProblemsSolutions       ProblemSolution[]
}

type ProblemSolution {
  problem  String
  solution String
}

// 2Ô∏è‚É£ Agent Usage Statistics
model AgentUsageStatistics {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  agentId              String                 @unique
  agentName            String
  usageLogs            UsageLog[]
  satisfactionRate     Int                    @default(0) // Current satisfaction rate in percentage
  satisfactionRateLogs SatisfactionRateLog[]  // History of review stars
  customerReviews      CustomerReview[]
}

type UsageLog {
  tokensUsed Int
  timestamp  DateTime @default(now())
}

type SatisfactionRateLog {
  reviewStar Int
  timestamp  DateTime @default(now())
}

type CustomerReview {
  username   String
  comment    String
  reviewStar Int
  timestamp  DateTime @default(now())
}

model AgentRequestsHandledLogs {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  agentId              String              @unique
  agentName            String
  totalRequestsHandled Int                 @default(0)
  requestLogs          RequestHandledLog[]
}

type RequestHandledLog {
  timestamp DateTime @default(now())
}

model CompanyAgentsRegistered {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  username    String        @unique   // ‚úÖ Now unique
  totalAgents Int           @default(0)
  agents      AgentRecord[]
}

type AgentRecord {
  agentId   String
  agentName String
}

// Embedded type for agent modification history
type AgentModification {
  timestamp                 DateTime @default(now())
  items                     Item[]
  companyName               String
  establishmentDate         DateTime
  companyOwnerName          String
  companyHumanServiceNumber String
  companyEmail              String
  companyDescription        String
}


/// Offer model to store promotional campaigns, discounts, and coupon codes
model Offer {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  offerId           String   @unique                            // üîë unique identifier (UUID)
  title             String                                   // short title e.g. "New Year Sale"
  description       String?                                  // detailed description
  offerCode         String?   @unique                        // optional coupon code
  discountType      String                                   // e.g. "percentage" | "flat"
  discountValue     Float                                    // e.g. 20 (for 20%) or 500 (‚Çπ500 flat)
  maxDiscountAmount Float?                                  // optional cap for percentage discounts
  
  applicableTo      String[]                                // e.g. ["all", "new-users", "premium-users"]
  minPurchaseAmount Float?                                  // e.g. must spend ‚Çπ1000
  
  applicableProducts String[]                               // product IDs or categories
  usageLimit        Int?                                    // total number of times offer can be used
  usageLimitPerUser Int?                                    // per user usage cap
  
  startDate         DateTime
  endDate           DateTime
  status            String   @default("active")              // "active" | "expired" | "upcoming" | "paused"
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}



model UserOrders {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Order {
  orderId      String
  amount       Float
  paymentInfo  Json
  receipt      String
  fulfillment  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime // ‚ùå cannot use @updatedAt in type
}

